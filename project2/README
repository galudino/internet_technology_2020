"""README
    Project 2: Load-balancing DNS servers (README)

    Rutgers University
        School of Arts and Sciences
            (01:198:352) Internet Technology
            Professor Nath Badri
            Section 02

    Assignment synopsis:
        In project 2, we will explore a design that implements load balancing among DNS servers by splitting the set of hostnames across multiple DNS servers.

        You will change the root server from project 1, RS, into a load-balancing server LS, that interacts with two top-level domain servers, TS1 and TS2. Only the TS servers store mappings from hostnames to IP addresses; the LS does not. 
        
        Further, the mappings stored by the TS servers do not overlap with each other; as a result, AT MOST ONE of the two TS servers will send a response to LS. 
        
        Overall, you will have four programs: the client, the load-balancing server (LS), and two DNS servers (TS1 and TS2).

        Each query proceeds as follows. 
        The client program makes the query (in the form of a hostname) to the LS. LS then forwards the query to _both_ TS1 and TS2. 
    
        However, at most one of TS1 and TS2 contain the IP address for this hostname. Only when a TS server contains a mapping will it respond to LS; otherwise, that TS sends nothing back.

        There are three possibilities. Either (1) LS receives a response from TS1, or (2) LS receives a response from TS2, or (3) LS receives no response from either TS1 or TS2 within a fixed timeout interval (see details below).
        
        If the LS receives a response (cases (1) and (2) above), it forwards the response as is to the client. If it times out waiting for a response (case 3) it sends an error string to the client. More details will follow.
        
        Please see the attached pictures showing interactions among the different programs.

    Copyright Â© 2020 Gemuele Aludino

    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files
    (the "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BY NOT LIMITED TO THE WARRANTIES
    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
    BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
    OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH
    THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
"""

This project was written for Python 2.7, as per the PDF instructions.
LS, TS1, and TS2 were tested on Rutgers iLabs.

Client was run on macOS 10.15.4 Catalina.

For my own testing,
    TS1 runs on cp.cs.rutgers.edu, port 50007
    TS2 runs on kill.cs.rutgers.edu, port 50009
    LS runs on pwd.cs.rutgers.edu, port 8345
        The hostnames/port numbers described for TS1/TS2
        are used for LS in my test case

I've built in the following command line args for my own use:
(this may be helpful for grading as well)

$ python ts1.py
    is equivalent to the following:
    $ python ts1.py 50007 PROJ2-DNSTS1.txt
    (argv[3] can be used to define an input file of a different name)

$ python ts2.py
    is equivalent to the following:
    $ python ts2.py 50009 PROJ2-DNSTS2.txt
    (argv[3] can be used to define an input file of a different name)

$ python ls.py
    is equivalent to the following:
    $ python ls.py 8345 cp.cs.rutgers.edu 50007 kill.cs.rutgers.edu 50009

$ python client.py
    is equivalent to the following:
    $ python client.py pwd.cs.rutgers.edu 8345 PROJ2-HNS.txt RESOLVED.txt
    (argv[3] and argv[4] can be used to define input/output files of different names)

In case there are any problems with packages/environment,
here are the imports that I used:

client.py:
    from os import EX_OK
    from os import path
    from sys import argv
    from enum import Enum
    from socket import timeout

ls.py:
    from os import EX_OK
    from sys import argv
    from socket import gethostbyaddr
    from socket import gethostbyname
    from select import select

ts1.py/ts2.py:
    from os import EX_OK
    from sys import argv
    from socket import gethostbyaddr

utils.py:
    from sys import _getframe
    from os import path
    from datetime import datetime
    from enum import Enum

dns_module.py:
    from os import path
    from enum import Enum
    from collections import namedtuple

network.py:
    from socket import socket
    from socket import AF_INET
    from socket import SOCK_DGRAM
    from socket import SOL_SOCKET
    from socket import SO_REUSEADDR
    from socket import gethostname
    from socket import gethostbyname


1. Please write down the full names and NetIDs of both your team members.
-------------------------------------------------------------------------------
Gemuele (Gem) Aludino       ga354

2. Briefly discuss how you implemented the LS functionality of tracking which TS responded to the query and timing out if neither TS responded.
-------------------------------------------------------------------------------
I began by opening 3 sockets:

LS socket
TS1 socket
TS2 socket

I check the provided hostnames of TS1 and TS2 to verify
that they are legit hostnames -- if not, the program ends.

TS1 and TS2 were set to be non-blocking.

Using an infinite-while-loop,
    LS receives a message from a client
    The LS message is sent to:
        TS1
        then TS2
    
    I then call select:
        resolved_sockets, _, _ = select([ts1_sock, ts2_sock], [], timeout_val)
    
    resolved_sockets will consist of ts1_sock, or ts2_sock, or neither --
    whichever socket received data within the timeout_val.

    If ts1_sock or ts2_sock received data,
    the message received from the respective socket will be sent to client.
    Otherwise, if neither TS socket received data,
    a message will be prepared by LS stating that the client query was unresolved. The prepared message will then be sent to the client.

3. Are there known issues or functions that aren't working currently in your attached code? If so, explain.
-------------------------------------------------------------------------------
No issues found. Client, LS, and the TS code should run as intended.

4. What problems did you face developing code for this project?
-------------------------------------------------------------------------------
I need to determine the best way to implement LS, and specifically,
how to determine which TS server, if any, responded to the original query.

My first implementation consisted of the following:
    I set a timeout value of 5 secs for TS1 and TS2.
    Then, I did a try/except on a recv call for TS1.
        If TS1 times out, we enter an except block:
            I do a try/except on a recv call for TS2.
                If TS2 times out, we enter an except block:
                    a message is prepared by LS saying that the query was unresolved.
                else, we get TS2's message and send it to the client.
            else, we get TS1's message and send it to the client.

The above implementation worked, but wasn't optimal.
I then learned how to use select() (the implementation described above),
and that was what I went with.

5. What did you learn by working on this project?
-------------------------------------------------------------------------------
- More Python
- A lot of the APIs in Python are transliterations of C APIs --
    I plan on using the select() function in my future C projects.
    (I hadn't known about it previously)

- The importance of RTT.
    For client, I gave it a timeout value of 10.0 secs.
        I did this, because LS gives the TS1 and TS2 sockets a timeout value of 5.0 secs. 
        
        LS, at most, may take up to 5.0 secs before it sends a reply message to the client -- and if the client has a timeout value of 5.0 secs, it may assume a false timeout (even though it had actually received data.) 
        
        To play things safe, I decided that the client should have 2x the timeout value that LS gives to TS1 and TS2.
            Since LS gives the TS sockets a timeout value of 5.0 secs,
            The client socket (from client.py) will have a timeout value of 5.0 * 2 secs, or 10 secs.
