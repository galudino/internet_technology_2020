#!/usr/bin/python3
"""client.py
    HW1: Programming Exercise (client socket portion)
 
    Rutgers University
        School of Arts and Sciences
            (01:198:352) Internet Technology
            Professor Nath Badri
            Section 02

    Assignment synopsis:
        This HW is to let your explore the socket programming interface in
        Python. This exercise will serve as the foundation for the upcoming
        programming projects. A sample working code is given to you in HW1.py.
        The program consists of server code and client code written as two
        separate threads. Understand the functionality implemented in the
        program.

    Copyright © 2020 Gemuele Aludino

    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files 
    (the "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BY NOT LIMITED TO THE WARRANTIES
    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
    BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
    OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH
    THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
"""

from os import EX_OK
import os
import sys
import socket

__author__ = "Gemuele (Gem) Aludino"
__copyright__ = "Copyright © 2020, Gemuele Aludino"
__date__ = "10 Feb 2020"
__license__ = "MIT"
__email0__ = "g.aludino@gmail.com"
__email1__ = "gem.aludino@rutgers.edu"
__status__ = "Release"

PORTNO: int = 50007
BUFFER_SIZE: int = 128
UTF_8: str = 'utf-8'
CONFIRM_CONNECTED: str = '__CONNECTED__'
END_OF_FILE: str = '__EOF__'

DEFAULT_HOST: str = 'localhost'
DEFAULT_INPUT_FILE_STR: str = 'HW1test.txt'
DEFAULT_OUTPUT_FILE_STR: str = 'HW1out.txt'

def file_to_list(input_file_str: str) -> [str]:
    """Creates a [str] using lines taken from a file named input_file_str;
    each element in the [str] will be suffixed with a linebreak

        Args:
            input_file_str: str
                The name of the desired file to open
        Returns:
            A [str] of lines from file input_file_str
        Raises:
            FileNotFoundError if input_file_str does not exist
    """
    output_list: [str] = []
    
    try:
        with open(input_file_str, 'r') as input_file:
            output_list = [line.rstrip() for line in input_file]
            print('[SUCCESS]: Input file \'{}\' opened.\n'.format(input_file_str))
    except FileNotFoundError:
        print('[ERROR]: Input file \'{}\' not found.\n'.format(input_file_str))
    
    return output_list

def append_to_file_from_list(output_file_str: str, input_list: [str]):
    """Appends str from input_list to a file named output_file_str, with each
    appendage suffixed with a linebreak

        Args:
            output_file_str: str
                The name of the desired output file to write to
            
            input_list: str
                The name of a list of str
        Returns:
            (none)
        Raises:
            (none)
    """
    if os.path.isfile(output_file_str):
        print('[NOTE]: Output file {} exists. Will append to file.'.format(output_file_str))
    else:
        print('[SUCCESS]: New file {} will be created for output.'.format(output_file_str))

    with open(output_file_str, 'a') as output_file:
        for line in input_list:
            output_file.write(line + '\n')

def ascii_list_by_socket(sock: socket, lines: [str]) -> [str]:
    """Sends str from lines: [str] through client socket connection sock: socket and returns a new [str] with equivalent ascii-formatted strings
    from lines, generated by a server program

        Args:
            sock: socket
                The client socket connection by which communication with the
                server is implemented (AF_INET, SOCK_STREAM)

            lines: [str]
                str elements parsed from an input file, using function file_to_list, that will be sent to a server via sock
        Returns:
            A [str] with ascii-formatted strings equivalent to the elements from within lines: [str]
        Raises:
            (none)

    """
    msg_out: str = ' '
    msg_in: str = ' '

    output: [str] = []
    
    for element in lines:
        msg_out = element
        
        print('[C]: Message sending to server: \'{}\''.format(msg_out))
        sock.send(msg_out.encode(UTF_8))

        msg_in = sock.recv(BUFFER_SIZE)
        print('[C]: Message received from server: \'{}\''.format(msg_in.decode('utf-8')))

        output.append(msg_in.decode(UTF_8))

    return output


def client(hostname: str, portno: int):
    """Creates a client socket and establishes a connection with a predefined server socket
        
        Args:
            hostname: str
                The desired hostname to connect to
            portno: int
                The desired port number to bind the client socket
        Returns:
            see sys.exit
        Raises:
            socket.error if client socket was not opened successfully
            ConnectionRefusedError if client socket was not able to find server
    """
    csock: tuple
    server_binding: tuple
    status: int = -1

    msg_out: str = ' '
    msg_in: str = ' '
    buff_out: bytes = []
    buff_in: bytes = []

    input_lines: [str] = []
    output_lines: [str] = []
    
    input_lines = file_to_list(DEFAULT_INPUT_FILE_STR)

    host: str = ' '

    try:
        csock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        print('[C]: Client socket created.\n')
    except socket.error:
        print('[ERROR]: {} \n'.format('Client socket open error.', socket.error))
    
    server_binding = (hostname, portno)
    
    try:
        status = csock.connect(server_binding)
    except ConnectionRefusedError:
        print('[ERROR]: {} \n'.format('Client socket connection error.', ConnectionRefusedError))
        print('Try the following:')
        print('\tstart the server first, and then the client')
        print('\tcheck the hostname and/or port number you have provided.\n\t\t(both must match the desired server)\n')
        exit()

    msg_in = csock.recv(BUFFER_SIZE)

    if msg_in == CONFIRM_CONNECTED:
        print('[C]: Client socket connected to server.\n')

    output_lines = ascii_list_by_socket(csock, input_lines)
    print('\n[C]: Finished server interaction.')

    append_to_file_from_list(DEFAULT_OUTPUT_FILE_STR, output_lines)
    print('[SUCCESS]: Output file \'{}\' written.'.format(DEFAULT_OUTPUT_FILE_STR))

    msg_out = END_OF_FILE
    csock.send(msg_out.encode(UTF_8))

    print('')
    csock.close()
    return exit()
    
def main(argv: [str]) -> int:
    """Main function, where client function is called

        Args:
            Command line arguments (as per sys.argv)
        Returns:
            Exit status, by default, 0 upon exit
        Raises:
            (none)
    """
    hostname: str = ' '
    portno: int = -1

    arg_length: int = len(argv)

    usage_str_0: str = '\nUSAGE:\nfor hostname localhost and port number 50007:\t python3 {}'.format(argv[0])

    usage_str_1: str = 'for custom hostname and port number 50007:\t python3 {} [hostname]'.format(argv[0])

    usage_str_2: str = 'for custom hostname and port number:\t\t python3 {} [hostname] [port number]'.format(argv[0])

    """
    Default hostname:       localhost
    Default port number:    50007

    To use default hostname and port number:
    python3 client.py

    To use custom hostname and default port number:
    python3 client.py [hostname]
        e.g.
            python3 client.py pwd.cs.rutgers.edu

    To use both custom hostname and port number:
    python3 client.py [hostname] [port number]
        e.g.
            python3 client.py pwd.cs.rutgers.edu 8345
    """
    if arg_length is 1:
        hostname = DEFAULT_HOST
        portno = PORTNO
    elif arg_length is 2:
        hostname = argv[1]
        portno = PORTNO
    elif arg_length is 3:
        hostname = argv[1]
        portno = int(argv[2])
    else:
        print(usage_str_0)
        print(usage_str_1)
        print(usage_str_2, '\n')

        exit()

    client(hostname, portno)
    return EX_OK

if __name__ == '__main__':
    """
        Program execution begins here.
    """
    retval = main(sys.argv)
